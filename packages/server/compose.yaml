services:
  # web:
  #   image: traefik:2.11
  #   command: --providers.docker --entrypoints.web.address=:80 --providers.docker.exposedbydefault=false
  #   ports:
  #     # The HTTP port
  #     - "80:80"
  #   volumes:
  #     # So that Traefik can listen to the Docker events
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - server
  server:
    build:
      context: .
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.go.rule=Path(`/`)"
    #   - "traefik.http.services.go.loadbalancer.server.port=80"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://postgres:example@db:5432/example
      STORAGE_DRIVER: s3
      # LOCAL_STORAGE_PATH: /data/outputs
      # PUBLIC_URL: http://localhost:3000/outputs
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_REGION: us-east-1
      S3_BUCKET_NAME: streampot
      S3_ENDPOINT: http://minio:9000
      S3_PUBLIC_DOMAIN: localhost:9000
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    volumes:
      # - ./public/outputs:/usr/src/app/public/outputs
    # Mount the docker socket to enable launching ffmpeg containers on-demand
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - streampot-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
  db:
    image: postgres:16
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD=example
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streampot-network
  redis:
    image: redislabs/redismod
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    networks:
      - streampot-network
  fileserver:
    image: nginx:latest
    container_name: fileserver
    ports:
      - "8080:80"
    volumes:
      # Mounts your media folder into the container
      - ./streampot_test_files:/usr/share/nginx/html/media
      # Mounts your config file
      - ./fileserver/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - streampot-network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - streampot-network
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  create-bucket:
    image: minio/mc
    networks:
      - streampot-network
    volumes:
      - ./policy.json:/tmp/policy.json
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/streampot --ignore-existing;
      /usr/bin/mc policy set /tmp/policy.json myminio/streampot;
      "

volumes:
  db-data:
  minio-data:

networks:
  streampot-network:
    driver: bridge

